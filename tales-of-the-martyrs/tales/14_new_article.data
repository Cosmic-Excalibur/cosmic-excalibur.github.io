<div class="main">

<p>目录：<ul><details open>
    <summary></summary>
    <li><a href="#tag-preface" class="noafter">前言</a></li>
    <li><a href="#tag-what-is-rsa" class="noafter">Crypto - What is RSA?</a></li>
    <li><a href="#tag-secret-shredder-1" class="noafter">Crypto - Secret Shredder 1</a></li>
    <li><a href="#tag-long-words-1" class="noafter">Crypto - Long Words 1</a></li>
    <li><a href="#tag-essence-of-the-elders" class="noafter">Crypto - Essence of The Elders</a></li>
    <li><a href="#tag-secret-shredder-2" class="noafter">Crypto - Secret Shredder 2</a></li>
</details></ul></p>
<br><br>

<ul class="section" id="tag-preface"><li>
    前言
</li></ul>
<p>这篇文章是2024 SpiritCTF Warmup中一些题目（见目录）的官方题解。</p>
<br><br>

<ul class="section" id="tag-what-is-rsa"><li>
    Crypto - What is RSA?
</li></ul>

<p>附件在此：</p>
<ul>
    <li><a underlined href="__ASSETS__/what-is-rsa.zip">what-is-rsa.zip</a></li>
</ul>
<br>

<p>RSA是由Ron Rivest、Adi Shamir和Leonard Adleman提出的一种非对称密码系统。传输信息时，加密者使用公钥加密信息，解密者使用私钥解密信息。与对称密码不同的是，使用公钥加密后的信息必须使用私钥解密（而非公钥）。RSA的基本原理是欧拉定理（Euler's theorem）（参见<a href="https://oi-wiki.org/math/number-theory/fermat/" underlined>OI-Wiki</a>）：</p>

\[
    ed\equiv 1\pmod{\varphi(N)},\quad N=pq,\quad \varphi(N)=(p-1)(q-1)
\]
\[
    c\equiv m^e\pmod{N},\quad c^d\equiv m^{ed}\equiv m^{1+k\varphi(N)}\equiv m\cdot (m^{\varphi(N)})^k\equiv m \pmod{N}
\]

<p>其中\(e\)是我们的公钥，而\(d\)是我们的私钥，\(m,c\)分别是明文和密文。本题给出了\(p,q,e\)的值，并且（一般情况下）\(e\)与\(\varphi(N)\)不互素，因此我们可以通过求解\(e\)在模\(\varphi(N)\)意义下的乘法逆元（参见<a href="https://oi-wiki.org/math/number-theory/inverse/" underlined>OI-Wiki</a>）轻易地求出\(d\)的值：</p>

<pre><code class="language-python"># Python 3.x
phi = (p-1) * (q-1)
d = pow(e, -1, phi)</code></pre>
<br>

<p>通过私钥\(d\)与密文\(c\)即可还原出明文\(m\)的值：</p>
<pre><code class="language-python"># pip install pycryptodome
from Crypto.Util.number import *
m = pow(c, d, N)
flag = long_to_bytes(m)</code></pre>
<br>

<p>其中明文的字节经过大端序编码，比如：</p>
<pre><code class="language-text">Char:   S   p   i   r   i   t   {   }   
        |   |   |   |   |   |   |   |
        v   v   v   v   v   v   v   v
Ascii:  53  70  69  72  69  74  7B  7D</code></pre>
<br>

<p>也即</p>
<pre><code class="language-python">bytes_to_long(b'Spirit{}') == 0x5370697269747B7D == 6012421442656041853</code></pre>
<br>

<p>Proof of Concept：</p>
<ul>
    <li><a underlined href="__ASSETS__/sol_what-is-rsa.py">sol_what-is-rsa.py</a></li>
</ul>
<br>

<p>Flag🚩：</p>
<pre><code class="language-text" style="color:red">Spirit{w3lc0mE_t0_7he_W0rLd_oF_Crypt0graphy_:p}</code></pre>

<br><br>

<ul class="section" id="tag-secret-shredder-1"><li>
    Crypto - Secret Shredder 1
</li></ul>

<p>附件在此：</p>
<ul>
    <li><a underlined href="__ASSETS__/secret-shredder-1.zip">secret-shredder-1.zip</a></li>
</ul>
<br>

<p>也是一个RSA的问题，不过这次没有p和q了，得通过其他的方法把私钥d给求出来，而这通常意味着我们需要知道N的所有因子（N=pq）。题目泄露出来了一个特殊的参数dp<comment>（也即发生了“dp泄露”）</comment>：</p>
<pre><code class="language-python">dp = d % (p-1)</code></pre>
<br>

<p>尝试将这个参数带入到公钥和私钥满足的方程中：</p>
\[
    \begin{aligned}
        e\cdot\text{dp} &= e\cdot (d+k_1(p-1))\\
        &=1+k_2(p-1)(q-1)+k_1e(p-1)\\
        &=1+k(p-1)
    \end{aligned}
\]

<p>现在，由于\(0 \le \text{dp} < p-1\)，我们知道：</p>
\[
    0\le k = \frac{e\cdot\text{dp}-1}{p-1} < e
\]

<p>本题中公钥指数\(e\)是一个不大的数字（<code>0x114514 + 1 = 1131797</code>），在0~e的范围内穷举k，对于每个k而言计算对应的p，验证p是不是N的因子即可。</p>
<br>

<p>Proof of Concept：</p>
<ul>
    <li><a underlined href="__ASSETS__/sol_secret-shredder-1.py">sol_secret-shredder-1.py</a></li>
</ul>
<br>

<p>Flag🚩：</p>
<pre><code class="language-text" style="color:red">Spirit{dp_0r_dq_l3akAg3_1s_dAn6er0us_(s0rt_of)}</code></pre>

<br><br>

<ul class="section" id="tag-long-words-1"><li>
    Crypto - Long Words 1
</li></ul>

<p>附件在此：</p>
<ul>
    <li><a underlined href="__ASSETS__/long-words-1.zip">long-words-1.zip</a></li>
</ul>
<br>

<p>源码第三行给了一个Flag🚩长度的提示：</p>
<pre><code class='language-python'>assert len(flag) == 54    # Oh...</code></pre>
<br>

<p>也就是说，明文m的大小大致为：</p>
\[
    2^{431}=2^{54\times 8-1}\le m < 2^{54\times 8}=2^{432}
\]

<p>可以求出N的大小大致为</p>
\[
    2^{419} \le N < 2^{420}
\]

<p>在加解密的过程中m会被模掉N，因此m在超过N的时候会发生改变，但是与改变前的m只相差N的某个整数倍：</p>
\[
    m\bmod{N} = m - k\cdot N,\quad 0 < k < 2^{13}
\]

<p>穷举这个k，直至解出来的字节串开头为<code>Spirit{</code>即可。</p>
<br>

<p>Proof of Concept：</p>
<ul>
    <li><a underlined href="__ASSETS__/sol_long-words-1.py">sol_long-words-1.py</a></li>
</ul>
<br>

<p>Flag🚩：</p>
<pre><code class="language-text" style="color:red">Spirit{0verflOwing_oF_iNpu7s_1s_Ov3rf1owIn9_0f_j0y_:p}</code></pre>

<br><br>

<ul class="section" id="tag-essence-of-the-elders"><li>
    Crypto - Essence of The Elders
</li></ul>

<p>附件在此：</p>
<ul>
    <li><a underlined href="__ASSETS__/essence-of-the-elders.zip">essence-of-the-elders.zip</a></li>
</ul>
<br>

<p>给了四个密文：</p>
<pre><code class="language-text">Vyjuru{fubvbjfjm_frqknsv_jsh_
2C602?4:6?E05F==02?50H62<
aHdkTHhBSjFtWFdtTWtXRUJNU0d3Qm5aZVdCNWZlcDV1UWliWGdnaXJiR0Y4Szh0SHRIMTRIa010elkyUzJwMmpDNXg=
nhxalwuhyasen_fxflgzf}</code></pre>
<br>

<p>分别对应四种不同的古典密码。解密后拼接在一起就是Flag🚩。可以使用<a href="https://cyberchef.org/" underlined>CyberChef</a>辅助分析。</p>
<p>对于第一个密文而言，可以尝试Caesar密码和Vigenère密码，由于Flag🚩的开头是<code>Spirit{</code>，可以推断出加密用的密钥：</p>
<pre><code class="language-text">V - S = 3 = d
y - p = 9 = j
j - i = 1 = b
u - r = 3 = d
r - i = 9 = j
u - t = 1 = b</code></pre>
<br>

<p>可见加密用的密钥为<code>djb</code>，解密后第一句明文即为</p>
<pre><code class="language-text">Spirit{classical_ciphers_are_</code></pre>
<br>

<p>第二句明文中含有<code>:=&lt;?</code>之类的字符（它们在ASCII码表上很接近），注意到ROT47编码后的小写字母中就含有这些字符（<code>23456789:;&lt;=>?@ABCDEFGHIJK</code>），使用ROT47将密文变换一次即可得到第二段明文：</p>
<pre><code class="language-text">are_ancient_dull_and_weak</code></pre>
<br>

<p>第三句密文为Base系列的编码套娃，使用<a href="https://cyberchef.org/" underlined>CyberChef</a>可以很快地找到每层套娃使用了哪种Base编码——将密文丢进CyberChef中，反复点击Output一栏中的魔术棒，可以发现使用的编码方式依次为Base32、Base85、Base58以及Base64，解码后的第三句明文为</p>
<pre><code class="language-text">_preceding_the_modern_</code></pre>
<br>

<p>第四句密文经过了某个随机的单表替换加密，这种加密的严重缺陷就在于密文足够长后，可以通过频率分析来推测出使用的替换表是什么。这里的第四句密文已经很长了，使用<a href="https://quipqiup.com/" underlined>quipqiup</a><comment>（statistics或dictionary）</comment>破解得到第四句明文：</p>
<pre><code class="language-text">cryptographic_systems}</code></pre>
<br>

<p>Flag🚩：</p>
<pre><code class="language-text" style="color:red">Spirit{classical_ciphers_are_ancient_dull_and_weak_preceding_the_modern_cryptographic_systems}</code></pre>

<br><br>

<ul class="section" id="tag-secret-shredder-2"><li>
    Crypto - Secret Shredder 2
</li></ul>

<p>附件在此：</p>
<ul>
    <li><a underlined href="__ASSETS__/secret-shredder-2.zip">secret-shredder-2.zip</a></li>
</ul>
<br>

<p>根据<code>task.py</code>的第六行，Flag🚩的长度很短，只有62个字节，因此</p>
\[
    m < 2^{62\times 8} = 2^{496} < r
\]

<p><code>task.py</code>中泄露出来了dr的值，并且可以通过<code>r = n // N</code>求出r的值，此外，</p>
\[
    c^{\text{dr}}\equiv m^{e\cdot \text{dr}}=m^{ed+k(r-1)}=m^{1+k'(r-1)}\equiv m\pmod{r}
\]

<p>Proof of Concept：</p>
<ul>
    <li><a underlined href="__ASSETS__/sol_secret-shredder-2.py">sol_secret-shredder-2.py</a></li>
</ul>
<br>

<p>Flag🚩：</p>
<pre><code class="language-text" style="color:red">Spirit{wHy_1s_7hIs_s3ntenc3_s0_sh0rt_:P_haaahahhahahahahahaha}</code></pre>

<br><br>



</div>
<br><br><br><br><br><br>
