from Crypto.Util.number import *
import sys, os
sys.setrecursionlimit(2**31-1)

unpad = lambda m: m[:m.index(0)] if 0 in m else m


e1 = 0x9999999999800001
d2 = 0x11451419198101
d3 = 0x1333333333333337


Q1_1 = 8655668817501026464198949072664736031516436091651795818206511847071805748365554754671778662110592521920421503788252093780088910482663353724481628900226686775913670722878211864535446158444642898006920074673032548473169172725070733696134525449810933749715918872704888232791382605261499219363765836097195572717254668330259454214051038366714830590522619783452172535078899321554060259297540189707511018467734695747756466927461722870715399471997648230491810367595798035814021154802361429149077071867477548238134978485093332302892948786945768213744986707545367994866564273432720468153991183881197384147089972968729958296556
Q1_2 = 12835712770540247496955604522644847257658758987004468517269936376470744368022995894662748499980387083239897773047615623027725238299008805591425134846579126042091405457940670262737173138442887530313444960357085262963995249769941632399290952259401615505811954993985773034945230184298477856826072355225686025485033218718400331704244403916732380213049326884206442702479596288236892088659712657973268247372557728368212571773356088726423718356850246733802518309481141879291384248160670638040156645931391969208529291918967964002980064803653297166298732307152097494399843881912089794284880625765436406466125928508874099000016
c1 = 7619951191586350655379072355447368537302555401379538591097444266925022511202753243403457461604022066872709365809170771299651116402998371778787580706293820678453874080389268501213850904090993506623145094055833995082399224351833935470402651751087686903195730720197210061958533600233572465331124149553904285905016062237294342318390684966629838086400289583397099722622748385888377642434794870328095539281892490239632425181657059044587841531274499116291755466806169221154583417824743604650178640237403770631024149105580965573288702154422452942298977577647609915173728562825017403045768896979572160521513068205318580177148
N1 = 16038651153823971753098706018444836937227299631129354698439691149837442407784841842927273982489984514529530725294443411139811149770991774309572811114195280530471802196326498770409487819587141460194759113273099496212495204286308492539607587661195847483302871778746117120244751672149550370771250806539218662240900404408655856775915544284007633477835812559193382105090280277346149698384641550536159774961659332688137014733964136583023356485836266187978522843096610535015625316443760541609769146234575394538930102249903610428204185127800317550485686458589377943214708953019935372094839975921041107253691886643725251343579

q1 = GCD(pow(Q1_1, 9191, N1)*pow(91, 411, N1) - pow(Q1_2, 411, N1)*pow(9, 9191, N1), N1)

m1 = unpad(long_to_bytes(pow(c1, pow(e1, -1, (N1//q1-1)*(q1-1)), N1)))


P.<x> = RealField(13300)[]

Q2 = P('3.0356365685244564398299833704710359838537933402059145639005827925521691434486402002935626327174682092029409894618876436230392646315209902549574592521633612633952763663572858671799227057116101708242618346195598942897994458728842885060162184470573311921239914038809182904602736351310371019790829850087357088238671983484670323889063377525077798310083633297133595015319523382514418053700268771708160931403730973191483464977534534312930141819660536610888641336156936806115292251377747927398890092786832345093521705980097463926053861849926435976190585201839445240357991783342077798552599676105793720823728649741286260735954080337409791669348098648569579346426542044291610037383862061331908295976147002063880815816473748716654578937055525528104692973292344751593895931531958312450605039018179215204265765119577918947529312568509681468343723102388891926757109931528815828060324157323218845349724718580470278464781674563299659193166353953302159644107878799036755083013829703298511626107138986052253665124119900853405126575466047358616159928156306004181661207189608154967397212224371356309053849397386971052703351066429249911765459765363807324235858209222')
c2 = 1231064446589750031013321496639713516087077321641979425806941174799995339134415194521954239053989371644153356923945140825554761337922318715401711004006045427492126752960835057840624072772734494671369089143040851508116941990364485858068332586044727096783031774878458509589118051077619648950987794388782888845172189033557952018849843608721142674282596640451535826512912988227160137533834069791462224671787462740560956834318881723664853496430328775945112317846665061958126043245842328229481812752976096573571314758602598028648686158654528791679616227729241002350245227247298272491538677556148120346524528191892881578010

N2 = round(exp(Q2) * 10**615)
m2 = unpad(long_to_bytes(pow(c2, d2, N2)))


P.<x> = RealField(13300)[]

Q3 = P('348404763605.7740781149211073267000768500421865771081042109943354778943688825916383809623083664113890435283938728450376513529091675718020499961595035945225186909564267337432508248188417491739475226539503551942538682732378662106852808199594935101842991959309177703220889888168362551765965135243950908173378144808574282408550510740033819359112474796475960783220149799402902111943198123651832916355520871959441970497205365582926039113472707366270998633373203381969983020343694163771900259876958939366367713569331137841827076321075037126378678239695927645004589743917731664457661007469513143645259099394564798975360408866255322575902538288040542324447789324821416823093521791684910879341253810667980274859812976518286313049959055399573358003291941814364803430281762680042141141424601574798223700561177781723324411685591853821031508717465839830187113360127680466291676985125705529140003724139065032515989678367393183532052714848863724475299204799516159461988730762719852920153254982341605654522338118441232729471575916324299396297151210517596945008702143221297313383167212332269700983465785401926365284086763212472189427448251408966932853054857825739821892664074671278963840866966448427247629682483592605152966384253652063711731574689905487391328103364734403462378435262879973629943169854477591828658437979174490543064091828222651408814547466244829612388031863164827695025273198024841919076736586993772710051778001188057758738216698488609996591899337139094059754514582956485937518272136080333719185328256049435113752185077255738004547267746018036437986522282523305791512281932169206530011061460571408328186706894705261329155897001666532133524634766881272081799946911138860411730288347269788475221794741943067336290231930034733939017958589809291692883054127790117380928759201717101332943831246257997167588382606706729246732740885945978619925461734468521883656786201189239626715905601597036199400506987101574534087495357861800351033487850298596412327239919713445331397665950156532815273647976002894920825627893960090887708313144632190107534362105528203551727613449772386005856647535606497232564370749195000134892078508542015047508145744376722702201118983309032150958053550891666083784601280455352776659961355240567239537016410092972530868797777302441633615180145568605387357951829648722991577836177393579866173298074553027695034731055921745662043204715576111816977857250548585416555810446545690627278007050561128413251903370931492134315532410292491507977855041768195308714421807626559824638012193282878180354727708439289028562556119900597512630368874810950252012497805312634975039865358525793771329756385620132246964505706139123139042467051377378869339316059042474052455417162942264728576400356372630851602588165116947078031666541314355279332875054010482396023711939861091172842214628583860498422451160262380093798174774069006137464844287239630164606394316505099832761221314437737180239846004003157826549968191597478293150770911625441432488312958650387716926036400695184144144355367829600535008889775629387528867554117538949173069610071038279707024687003769320850695921777239018866209679197879999052340710651365305432417146359093595203969691637477492950140572799183257066404917473503655808925399283921576222354589933966347038040344680306006431662618187851797038957637907802210689003892874788798664475837832003578819167238073258019298970974583318416478968976576999632166864840549241764733522727234858162751026184443678478637106192072271676688868232653528382018323917377413372802544265814972986088163180783312800618678427202976306856843455253162805345420382219658921916362122238955309253040991049222663713333162686702250100678063207619908511658752449354854056032515130326383968799744566184288771075029274592617828617814955076107480773906131592701551362244455916855861056397303153824917145210322482659243863234014065788426655127882740599079196553850035806080700051861325909219216998907498349938113267612330271860549836170881515449337644199996906038079602612787964613471039930984178454442060372345397348899433948')
c3 = 5134412389932411516466362893343407464101451128974418705254482139730305406769904434177831099928336807526707797756097340889655958320006986602679579092850997863628921957793787723907148484549287120141960112508510631707344632012144787023781161109561172850963678773400266665180748271621997395476964222059502055979225293592931847800135343231426030738795959340855746347898539294593638476458656313327414549923697250084594387909612032674521367309910909000040596891117941831014418894094237037148570403249182546214883802136534706994811575220051641788840554679761253566294907272273743788764179787426160342299286294877508539693852

f = lambda x: 10**1860*(arctan((2*x-1)/sqrt(3))/sqrt(3)-log(x**2-x+1)/6+log(x+1)/3)
g = lambda x: f(x+1)-f(x)

def bs(f, a, b, t):
    m = (a + b)//2
    print(f'\033[f%0{length}s' % m)
    c = P(f(m).real())
    if a == m or b == m: return m
    if c > t:
        return bs(f, m, b, t)
    else:
        return bs(f, a, m, t)

length = len(str(2**2048))
res = bs(g,2**2046,2**2048,Q3)

print()

for N3 in range(res-10, res+10):
    m3 = unpad(long_to_bytes(pow(c3, d3, N3)))
    if all(32 <= x <= 126 for x in m3):
        print(m1 + m2 + m3)
        print()