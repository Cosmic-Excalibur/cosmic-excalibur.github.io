from Crypto.Util.number import *
import itertools

C = [613865483278018068252699664344014709603516906746931166051427750616361200468707690831404020218656875084418550224413996053079342864898401795763165162078246618111604777593040660642912057306221452064472274046070821517539193613498685453074624282109324379926231192557180542435340969864132119593041711358872115405874364598887793241511430254996199731357082354916052164113949623179598136562096295676073087781639871668219434230021548949701211884517843541157354088095790525632350783639986022007948401580816197207016436522842590665610501156024865695696904566492693695119723293496114231169856305023037844584473338807912586875707600364819890669100254969485468659519811774306439412606664839186477469471705259250833176668759144364716469013187497055958568568833468917267690747466509873300681042926144801047098106011988640738905375480014330337236157762241463040450369329857116881974521230050992365545267271071656913911801116050540398641643774385253106721071704372814783224265146831781292451519671545831104249259649825043436077261829424199640586840100064504718504084687245230247025590555140567918382183739553868767104267287390814588272528022263596870309219008420027857207262298920988240843464367423459125938409345791905262506077210767697641725131845657915063006168678036973128294138919177816631075260964754920461338919640208715147859313022129119104220613492278409206331300978073447313353841266579693269593051798634892554731378288693431694643916314688532279216322727915161656058481514673086014058447608248813383574448881880352040004076733393319193468994104200546510770868505329993104192562433855428535979312784724513183099390633645671120844556506294295992655282194352892131753495674679615743981810959623439744331909310673221108784996807299072882654656204672704933960205980110750900159183959219642112579212752633053366765488410011288671891300805386272118441610217334300094529853561081688887902830562014461520447717503298663406799238245231377946213086275128298967334260627923676793074685734652984469626476959708684429179459632962489958308714628030000000000000000000,



 
A = matrix(ZZ, 4, 5)

for i in range(4):
    A[i,0] = C[i]
    A[i,i+1] = 1

A_ = A.LLL()
v = A_[0]
a = v[1:]

B = matrix(ZZ, 4, 5)

for i in range(4):
    B[i,0] = a[i]*2**128
    B[i,i+1] = 1

B_ = B.LLL()

D = B_[:-1,1:]
center = 2**63#(2**63+(2**64-2**63)//2)
t = vector([center]*4)

def kannan_cvp(mat, target, reduction=(lambda x: x.LLL()), weight=None):
    """
    Solve closest vector problem using Kannan's algorithm

    :param mat: a matrix
    :param target: a vector
    :returns: a solution as a vector
    """
    if weight is None:
        weight = max(target)
    L = block_matrix([[mat, 0], [-matrix(target), weight]])
    for row in reduction(L):
        if row[-1] < 0:
            row = -row
        if row[-1] == weight:
            return row[:-1] + target

tt = kannan_cvp(D, t)
print(tt)

cand1 = (12792141052963846634, 9046310731417797269, 9252493367855630333, 7146501603640644696)
cand2 = (5399616291323082697, 9758841818404885789, 7935165959465319733, 13234149580902310257)
cand3 = (3359842739501408499, 8891228064188007892, 12225198018622121366, 6127037753097347812)
cand4 = (6728221938201536857, 2777926548143569583, 3523273592081980311, 352951208792993045)
cand5 = (12127838229524619554, 12536768366548455372, 11458439551547300044, 13587100789695303302)
cand6 = (6063919114762309777, 6268384183274227686, 5729219775773650022, 6793550394847651651)
cand7 = (8103692666583983975, 7135997937491105583, 1439187716616848389, 13900662222652614096)
cand8 = (13456443876403073714, 5555853096287139166, 7046547184163960622, 705902417585986090)
cand9 = (2695539916062181419, 12381685699318665995, 14431144202313791077, 12567636939152006418)
cand10 = (16160520251663974992, 2933009215373358960, 550568941315489278, 1372415059336289929)
cand11 = (15496217428224747912, 6423466850504017063, 2756515125007158989, 7813014245390948535)
cand12 = (10752367501142172436, 8178696977200919372, 13542525427012431966, 39389775835682251)

test = lambda *arr: list(long_to_bytes(a[0]^^b[0]^^c[0]) for a,b,c in itertools.combinations(arr, 3))
candidates = [eval('cand%d'%i) for i in range(1, 12 + 1)]
for cand in candidates:
    assert all(x > 0 and x < 2**64 for x in cand)
    assert vector(cand)*a == 0
res = test(*candidates)
for entry in res:
    if all(32 <= x <= 127 for x in entry) or b'corctf' in entry:
        print('\x1b[32;1m%s\x1b[0m        <-  Gotcha ;)' % str(entry))
    else:
        print(str(entry))